{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;AAAO;AACP;AACA;AACA,oCAAoC,4BAA4B;AAChE;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AClBO;AACP;AACA;AACA;AACA;AACA,0DAA0D,OAAO,KAAK,SAAS;AAC/E,UAAU;AACV;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,YAAY,2BAA2B;;AAEvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UCpHA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNkD;AACZ;;AAEtC,gBAAgB,mDAAU;;AAE1B;AACA,4BAA4B,+DAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,EAAE,+DAAc;AAChB;AACA;AACA,CAAC","sources":["webpack://7-webpack-template/./src/dom.js","webpack://7-webpack-template/./src/weather-api.js","webpack://7-webpack-template/webpack/bootstrap","webpack://7-webpack-template/webpack/runtime/define property getters","webpack://7-webpack-template/webpack/runtime/hasOwnProperty shorthand","webpack://7-webpack-template/webpack/runtime/make namespace object","webpack://7-webpack-template/./src/index.js"],"sourcesContent":["export const weatherDom = () => {\n  function updateCurrentWeatherDom(currentWeather) {\n    const currentCelcius = document.querySelector(\".currentCelcius\");\n    currentCelcius.textContent = `${currentWeather.temperature} Â°C`;\n  }\n\n  function updateLocationWeatherDom(currentLocation) {}\n\n  function updateHourlyWeatherDom(hourlyForecast) {}\n\n  function updateDailyWeatherDom(dailyForecast) {}\n\n  return {\n    updateCurrentWeatherDom,\n    updateLocationWeatherDom,\n    updateHourlyWeatherDom,\n    updateDailyWeatherDom,\n  };\n};\n","export const weatherApiData = () => {\n  async function getWeatherData(location) {\n    let apiKey = \"0d353533d1cd4029975135630240705\";\n    try {\n      const response = await fetch(\n        `http://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${location}&days=4&aqi=yes&alerts=yes`,\n        { mode: \"cors\" }\n      );\n      const data = await response.json();\n      console.log(data);\n      return processWeatherData(data);\n    } catch (error) {\n      console.log(\"Error fetching the image: \", error);\n      return null;\n    }\n  }\n\n  async function processWeatherData(data) {\n    if (!data || !data.current) {\n      console.log(\n        \"Invalid data format or missing current weather information.\"\n      );\n      return null;\n    }\n\n    const currentWeather = processCurrentWeather(data.current);\n    const weatherLocation = currentLocation(data.location);\n    const hourlyForecast = processHourlyForecast(\n      data.forecast.forecastday[0].hour\n    );\n    const dailyForecast = processDailyForecast(\n      data.forecast.forecastday.slice(0, 3)\n    );\n\n    return {\n      current: currentWeather,\n      location: weatherLocation,\n      hourly: hourlyForecast,\n      daily: dailyForecast,\n    };\n  }\n\n  async function processCurrentWeather(currentWeather) {\n    const {\n      condition,\n      feelslike_c,\n      wind_mph,\n      humidity,\n      vis_miles,\n      temp_c,\n      uv,\n      gust_mph,\n      air_quality,\n    } = currentWeather;\n\n    const weatherInfo = {\n      Weather: condition.text,\n      feelsLikeC: feelslike_c,\n      wind: wind_mph,\n      humidity: humidity,\n      visibility: vis_miles,\n      temperature: temp_c,\n      uvIndex: uv,\n      gust: gust_mph,\n      airQuality: air_quality.pm10,\n    };\n\n    console.log(weatherInfo);\n    return weatherInfo;\n  }\n\n  async function currentLocation(currentLocationData) {\n    const { country, localtime, name } = currentLocationData;\n\n    const LocationData = {\n      country: country,\n      time: localtime,\n      city: name,\n    };\n\n    console.log(LocationData);\n    return LocationData;\n  }\n\n  async function processHourlyForecast(hourlyData) {\n    const next12Hours = hourlyData.slice(0, 13).map((hour) => ({\n      time: hour.time,\n      temperature: hour.temp_c,\n      condition: hour.condition.text,\n    }));\n\n    console.log(next12Hours);\n    return next12Hours;\n  }\n\n  async function processDailyForecast(dailyData) {\n    const next3Days = dailyData.map((day) => ({\n      date: day.date,\n      condition: day.day.condition.text,\n      chanceOfRain: day.day.daily_chance_of_rain,\n      maxTemperature: day.day.maxtemp_c,\n      minTemperature: day.day.mintemp_c,\n    }));\n\n    console.log(next3Days);\n    return next3Days;\n  }\n\n  return {\n    getWeatherData,\n    processWeatherData,\n    processCurrentWeather,\n    currentLocation,\n    processHourlyForecast,\n    processDailyForecast,\n  };\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { weatherApiData } from \"./weather-api.js\";\nimport { weatherDom } from \"./dom.js\";\n\nconst weather = weatherDom();\n\nasync function updateWeatherDom(location) {\n  const weatherData = await weatherApiData().getWeatherData(location);\n  if (weatherData) {\n    weather.updateCurrentWeatherDom(weatherData.current);\n    weather.updateLocationWeatherDom(weatherData.location);\n    weather.updateHourlyWeatherDom(weatherData.hourly);\n    weather.updateDailyWeatherDom(weatherData.daily);\n  }\n}\n\nconst locationBtn = document.getElementById(\"locationBtn\");\nconst weatherLoc = document.getElementById(\"weatherLoc\");\n\nlocationBtn.addEventListener(\"click\", () => {\n  const valuePut = weatherLoc.value;\n  console.log(valuePut);\n\n  weatherApiData().getWeatherData(valuePut);\n  updateWeatherDom(valuePut);\n  weatherLoc.value = \"\";\n});\n"],"names":[],"sourceRoot":""}