{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC,SAAS;AAC/C;AACA;AACA;;AAEO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,wDAAwD,mBAAmB;;AAE3E;AACA;AACA,qBAAqB,mBAAmB;;AAExC;AACA;AACA;AACA,qBAAqB,yBAAyB;;AAE9C;AACA;AACA,oCAAoC,qBAAqB;AACzD,mCAAmC,qBAAqB;AACxD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kCAAkC,iBAAiB;AACnD,kCAAkC,UAAU;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA,qBAAqB,qBAAqB;;AAE1C,uDAAuD,kBAAkB;;AAEzE;AACA;AACA,qBAAqB,sBAAsB;;AAE3C;AACA;AACA,qBAAqB,wBAAwB;;AAE7C;AACA;AACA,qBAAqB,wBAAwB;;AAE7C;AACA;AACA,qBAAqB,wBAAwB;;AAE7C;AACA;AACA,MAAM,wCAAwC;AAC9C,MAAM,uCAAuC;AAC7C,MAAM,wCAAwC;AAC9C;;AAEA,sBAAsB,oBAAoB;AAC1C;AACA;AACA;AACA,WAAW,UAAU;AACrB,+BAA+B,aAAa;AAC5C;AACA,WAAW,UAAU;AACrB,oCAAoC,kBAAkB;AACtD;AACA,WAAW,UAAU;AACrB,yBAAyB,uBAAuB,OAAO,uBAAuB;AAC9E;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,qDAAqD;AACrD;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;AC5MO;AACP;AACA;AACA;AACA;AACA,2DAA2D,OAAO,KAAK,SAAS;AAChF,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,YAAY,2BAA2B;;AAEvC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oBAAoB,QAAQ;AAC5B,gDAAgD;AAChD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,cAAc,MAAM,GAAG,wBAAwB,EAAE,SAAS,EAAE,KAAK;AACjE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UC5IA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNkD;AACJ;;AAE9C,+DAAc;;AAEd;AACA;;AAEA;AACA;;AAEA,4BAA4B,+DAAc;AAC1C;AACA,IAAI,2DAAkB;AACtB;;AAEA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://7-webpack-template/./src/dom.js","webpack://7-webpack-template/./src/weather-api.js","webpack://7-webpack-template/webpack/bootstrap","webpack://7-webpack-template/webpack/runtime/define property getters","webpack://7-webpack-template/webpack/runtime/hasOwnProperty shorthand","webpack://7-webpack-template/webpack/runtime/make namespace object","webpack://7-webpack-template/./src/index.js"],"sourcesContent":["// Function to set the background image based on weather condition\nfunction setBackgroundImage(condition) {\n  const body = document.body;\n  let imageUrl;\n\n  switch (condition) {\n    case \"Sunny\":\n      imageUrl = \"images/background/desert.jpg\";\n      break;\n    case \"Clear\":\n      imageUrl = \"images/background/desert.jpg\";\n      break;\n    case \"Cloudy\":\n      imageUrl = \"images/background/cloud.jpg\";\n      break;\n    case \"rainy\":\n      imageUrl = \"images/background/rain.jpg\";\n      break;\n    case \"Patchy rain nearby\":\n      imageUrl = \"images/background/rain.jpg\";\n      break;\n    case \"Torrential rain shower\":\n      imageUrl = \"images/background/rain.jpg\";\n      break;\n    case \"thunderstorm\":\n      imageUrl = \"images/background/thunderstorm.jpg\";\n      break;\n    default:\n      imageUrl = \"images/background/cloud.jpg\";\n  }\n\n  body.style.backgroundImage = `url(${imageUrl})`;\n  body.style.backgroundSize = \"cover\";\n  body.style.backgroundPosition = \"center\";\n}\n\nexport function displayWeatherData(data) {\n  if (!data) return;\n\n  setBackgroundImage(data.current.Weather);\n  console.log(data.current.Weather);\n\n  const currentHigh = document.querySelector(\".currentHigh\");\n  const currentLow = document.querySelector(\".currentLow\");\n  const weatherCondition = document.querySelector(\".weatherCondition\");\n\n  // FRONT PAGE!\n\n  // Display location info\n  document.querySelector(\".todayTime\").textContent = `${data.location.time}`;\n\n  document.querySelector(\n    \".locationToday\"\n  ).textContent = `${data.location.city}`;\n\n  // Display current weather\n  document.getElementById(\n    \"currentCelcius\"\n  ).textContent = `${data.current.temperature}°C`;\n\n  if (data.daily.length > 0) {\n    const today = data.daily[0];\n    currentHigh.textContent = `H: ${today.maxTemperature}°C`;\n    currentLow.textContent = `L: ${today.minTemperature}°C`;\n    weatherCondition.textContent = today.condition;\n  }\n\n  // Display hourly forecast\n  const todayHours = document.getElementById(\"todayHours\");\n  todayHours.innerHTML = \"\";\n  data.hourly.forEach((hour) => {\n    const eachHourDiv = document.createElement(\"div\");\n    const todayHourDiv = document.createElement(\"div\");\n    const todayConditionDiv = document.createElement(\"div\");\n    const todayTimeDiv = document.createElement(\"div\");\n    const weatherIcon = document.createElement(\"img\");\n\n    eachHourDiv.className = \"eachHourDiv\";\n    eachHourDiv.classList.add(\"insideHour\");\n    weatherIcon.classList.add(\"weatherIcon\");\n\n    todayHourDiv.textContent = `${hour.temperature}°`;\n    todayTimeDiv.textContent = `${hour.time}`;\n\n    // Determine the appropriate weather icon based on the condition\n    switch (hour.condition.toLowerCase()) {\n      case \"sunny\":\n        weatherIcon.src = \"images/background/sun.png\";\n        weatherIcon.alt = \"Sunny\";\n        break;\n      case \"Patchy rain nearby\":\n        weatherIcon.src = \"images/background/rain.png\";\n        weatherIcon.alt = \"Rainy\";\n        break;\n      case \"Patchy rain\":\n        weatherIcon.src = \"images/background/rain.png\";\n        weatherIcon.alt = \"Rainy\";\n        break;\n      case \"clear\":\n        weatherIcon.src = \"images/background/sun.png\";\n        weatherIcon.alt = \"Sunny\";\n        break;\n      case \"cloudy\":\n        weatherIcon.src = \"images/background/cloud.png\";\n        weatherIcon.alt = \"Cloudy\";\n        break;\n      case \"rainy\":\n        weatherIcon.src = \"images/background/rain.jpg\";\n        weatherIcon.alt = \"Rainy\";\n        break;\n      case \"Light rain\":\n        weatherIcon.src = \"images/background/rain.png\";\n        weatherIcon.alt = \"Rainy\";\n        break;\n      default:\n        weatherIcon.src = \"images/background/partly-cloudy.png\";\n        weatherIcon.alt = \"Weather\";\n    }\n\n    eachHourDiv.appendChild(todayHourDiv);\n    eachHourDiv.appendChild(weatherIcon);\n    eachHourDiv.appendChild(todayConditionDiv);\n    eachHourDiv.appendChild(todayTimeDiv);\n    todayHours.appendChild(eachHourDiv);\n  });\n\n  // BACK PAGE!\n\n  document.querySelector(\n    \".uvIndexData\"\n  ).textContent = `${data.current.uvIndex}`;\n\n  document.querySelector(\".windData\").textContent = `${data.current.wind}mph`;\n\n  document.querySelector(\n    \".humiditiyData\"\n  ).textContent = `${data.current.humidity}%`;\n\n  document.querySelector(\n    \".feelsLikeData\"\n  ).textContent = `${data.current.feelsLikeC}°`;\n\n  document.querySelector(\n    \".visibilityData\"\n  ).textContent = `${data.current.visibility}mi`;\n\n  document.querySelector(\n    \".airQualityData\"\n  ).textContent = `${data.current.airQuality}`;\n\n  // Display next days' forecast\n  const dayCasts = [\n    { selector: \".tomorrowCast\", dayIndex: 1 },\n    { selector: \".nextDayCast\", dayIndex: 2 },\n    { selector: \".thirdDayCast\", dayIndex: 3 },\n  ];\n\n  dayCasts.forEach(({ selector, dayIndex }) => {\n    if (data.daily.length > dayIndex) {\n      const dayData = data.daily[dayIndex];\n      document.querySelector(\n        `${selector} .nextDate`\n      ).textContent = `Date: ${dayData.date}`;\n      document.querySelector(\n        `${selector} .daySituation`\n      ).textContent = `Condition: ${dayData.condition}`;\n      document.querySelector(\n        `${selector} .dayTemperature`\n      ).textContent = `${dayData.maxTemperature}°C / ${dayData.minTemperature}°C`;\n    }\n  });\n\n  const leftHoursArrow = document.getElementById(\"leftHoursArrow\");\n  const rightHoursArrow = document.getElementById(\"rightHoursArrow\");\n\n  let scrollPosition = 0;\n\n  function updateArrows() {\n    leftHoursArrow.disabled = scrollPosition === 0;\n    rightHoursArrow.disabled =\n      scrollPosition >= todayHours.scrollWidth - todayHours.clientWidth;\n  }\n\n  function scrollTodayHours(direction) {\n    const scrollAmount = todayHours.clientWidth / 5; // Scroll by the width of one visible item\n    if (direction === \"left\") {\n      scrollPosition = Math.max(scrollPosition - scrollAmount, 0);\n    } else {\n      scrollPosition = Math.min(\n        scrollPosition + scrollAmount,\n        todayHours.scrollWidth - todayHours.clientWidth\n      );\n    }\n    todayHours.scrollTo({\n      left: scrollPosition,\n      behavior: \"smooth\",\n    });\n    updateArrows();\n  }\n\n  updateArrows();\n\n  leftHoursArrow.addEventListener(\"click\", () => scrollTodayHours(\"left\"));\n  rightHoursArrow.addEventListener(\"click\", () => scrollTodayHours(\"right\"));\n}\n","export const weatherApiData = () => {\n  async function getWeatherData(location) {\n    let apiKey = \"0d353533d1cd4029975135630240705\";\n    try {\n      const response = await fetch(\n        `https://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${location}&days=4&aqi=yes&alerts=yes`,\n        { mode: \"cors\" }\n      );\n      const data = await response.json();\n      // console.log(data);\n      const processedData = await processWeatherData(data);\n      return processedData;\n    } catch (error) {\n      console.log(\"Error fetching the image: \", error);\n      return null;\n    }\n  }\n\n  async function processWeatherData(data) {\n    if (!data || !data.current) {\n      console.log(\n        \"Invalid data format or missing current weather information.\"\n      );\n      return null;\n    }\n\n    const currentWeather = await processCurrentWeather(data.current);\n    const weatherLocation = await currentLocation(data.location);\n    const hourlyForecast = await processHourlyForecast(\n      data.forecast.forecastday[0].hour\n    );\n    const dailyForecast = await processDailyForecast(\n      data.forecast.forecastday.slice(0, 4)\n    );\n\n    return {\n      current: currentWeather,\n      location: weatherLocation,\n      hourly: hourlyForecast,\n      daily: dailyForecast,\n    };\n  }\n\n  async function processCurrentWeather(currentWeather) {\n    const {\n      condition,\n      feelslike_c,\n      wind_mph,\n      humidity,\n      vis_miles,\n      temp_c,\n      uv,\n      air_quality,\n    } = currentWeather;\n\n    const weatherInfo = {\n      Weather: condition.text,\n      feelsLikeC: feelslike_c,\n      wind: wind_mph,\n      humidity: humidity,\n      visibility: vis_miles,\n      temperature: temp_c,\n      uvIndex: uv,\n      airQuality: air_quality.pm10,\n    };\n\n    // console.log(weatherInfo);\n    return weatherInfo;\n  }\n\n  async function currentLocation(currentLocationData) {\n    const { country, localtime, name } = currentLocationData;\n\n    const timePart = localtime.split(\" \")[1];\n    const strTime = convertTo12HourFormat(timePart);\n\n    const LocationData = {\n      country: country,\n      time: strTime,\n      city: name,\n    };\n\n    // console.log(LocationData);\n    return LocationData;\n  }\n\n  async function processHourlyForecast(hourlyData) {\n    const now = new Date();\n    const currentHour = now.getHours();\n    const next12Hours = [];\n\n    for (let i = 0; i < 13; i++) {\n      const hourIndex = (currentHour + i) % 24; // Ensure we wrap around if necessary\n      const hourData = hourlyData[hourIndex];\n\n      const timePart = hourData.time.split(\" \")[1];\n      const strTime = convertTo12HourFormat(timePart);\n\n      next12Hours.push({\n        time: strTime,\n        temperature: hourData.temp_c,\n        condition: hourData.condition.text,\n      });\n    }\n\n    // console.log(next12Hours);\n    return next12Hours;\n  }\n\n  function convertTo12HourFormat(timeString) {\n    const [hour, minute] = timeString.split(\":\");\n    let hours = parseInt(hour);\n    const minutes = parseInt(minute);\n    const ampm = hours >= 12 ? \"PM\" : \"AM\";\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    return `${hours}:${minutes < 10 ? \"0\" : \"\"}${minutes} ${ampm}`;\n  }\n\n  async function processDailyForecast(dailyData) {\n    const next3Days = dailyData.map((day) => ({\n      date: day.date,\n      condition: day.day.condition.text,\n      chanceOfRain: day.day.daily_chance_of_rain,\n      maxTemperature: day.day.maxtemp_c,\n      minTemperature: day.day.mintemp_c,\n    }));\n\n    // console.log(next3Days);\n    return next3Days;\n  }\n\n  return {\n    getWeatherData,\n    processWeatherData,\n    processCurrentWeather,\n    currentLocation,\n    processHourlyForecast,\n    processDailyForecast,\n  };\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { weatherApiData } from \"./weather-api.js\";\nimport { displayWeatherData } from \"./dom.js\";\n\nweatherApiData().getWeatherData(\"miami\");\n\nconst locationBtn = document.getElementById(\"locationBtn\");\nconst weatherLoc = document.getElementById(\"weatherLoc\");\n\nasync function processBtnData() {\n  const valuePut = weatherLoc.value;\n\n  const weatherData = await weatherApiData().getWeatherData(valuePut);\n  if (weatherData) {\n    displayWeatherData(weatherData);\n  }\n\n  weatherLoc.value = \"\";\n}\n\nlocationBtn.addEventListener(\"click\", async () => {\n  processBtnData();\n});\n\nweatherLoc.addEventListener(\"keypress\", async (e) => {\n  if (e.key === \"Enter\") {\n    e.preventDefault();\n    await processBtnData();\n    console.log(\"It worked\");\n  }\n});\n"],"names":[],"sourceRoot":""}